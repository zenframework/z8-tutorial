import org.zenframework.z8.base.form.Listbox;
import org.zenframework.z8.base.form.action.Action;
import org.zenframework.z8.base.form.action.ActionType;
import org.zenframework.z8.base.query.Query;
import org.zenframework.z8.base.table.value.Field;
import org.zenframework.z8.library.model.Book;
import org.zenframework.z8.library.model.Journal;

/*
 * Простая форма для отображения карточки книги
 */

/*
 * Атрибут [entry] убираем, т.к. форма добавлена в LibraryDesktop как подпункт меню.
 */
// [entry]

[displayName "Книги"]
public class Books extends Book {

	[displayName "Наименование"] name;
	[displayName "Описание"] description;
	[displayName "Библиотека"] library.name;

	/*
	 * Поле description занимает 4 столбца формы (colSpan) и растягивается (flex)
	 * вместе с journalList в соотношении 1 к 3
	 */
	description.colSpan = 4;
	description.flex = 1;

	public Journal journal;

	[displayName "Посетитель (телефон)"] journal.person.namePhone;

	/*
	 * Action - действие над записью, инициируемое пользователем через визуальный интерфейс ("кнопку").
	 */

	[displayName "Выдать книгу"]
	public Action lendBook = class {
		type = ActionType.Primary;
		virtual protected void execute(guid recordId, Query context, guid[] selected, Query query) {
			// Перебираем в цикле все выбранные записи и вызываем для каждой нужный метод
			for (guid journalId : selected)
				container.journal.lendBook(journalId);
		}
	};

	[displayName "Вернуть книгу"]
	public Action returnBook = class {
		type = ActionType.Success;
		virtual protected void execute(guid recordId, Query context, guid[] selected, Query query) {
			// Перебираем в цикле все выбранные записи и вызываем для каждой нужный метод
			for (guid journalId : selected)
				container.journal.returnBook(journalId);
		}
	};

	[displayName "История"]
	public Listbox journalList;
	journalList.query = journal;
	journalList.link = journal.bookId;
	journalList.columns = { journal.person.namePhone, journal.bookedAt, journal.lendedAt, journal.returnedAt, journal.statusStr };
	journalList.actions = { lendBook, returnBook };

	/*
	 * Список journalList занимает 4 столбца формы (colSpan) и растягивается (flex)
	 * вместе с description в соотношении 3 к 1
	 */
	journalList.colSpan = 4;
	journalList.flex = 3;

	/*
	 * Элементы формы (controls) организованы в 4 столбца
	 */
	colCount = 4;

	names = { name };
	controls = { name, type.name, author.name, library.name, description, journalList };
	columns = { name, type.name, author.name, library.name };

	/*
	 * Метод void onDestroyAction(guid recordId) вызывается системой при выполнении пользовательского запроса на удаление записи.
	 * (см. Query.onDestroyAction() и прочие методы-обработчики событий, а также Journal.beforeCreate()).
	 * recordId - идентификатор удаляемой записи.
	 * В данном случае перед удалением записи о книге проверяется наличие записей в журнале о ней. Если такие записи есть - ошибка.
	 */
	virtual protected void onDestroyAction(guid recordId) {
		super.onDestroyAction(recordId);

		Journal journal;
		if (journal.readFirst(Field[] { journal.book.fullName }, journal.bookId == recordId))
			throw "Невозможно удалить книгу " + journal.book.fullName.get() + ": журнал не пустой";
	}

}